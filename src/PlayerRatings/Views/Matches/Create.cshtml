@using PlayerRatings.Localization
@model PlayerRatings.ViewModels.Match.NewResultViewModel

@inject ILanguageData LanguageData

@{
    ViewData["Title"] = LocString[nameof(LocalizationKey.Create)];
}

<form method="post" asp-antiforgery="true">
    <div class="form-horizontal">
        <h2>@LocString[nameof(LocalizationKey.Match)]</h2>
        <hr />
        <div asp-validation-summary="All" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="LeagueId" class="col-md-2 control-label">@LocString[nameof(LocalizationKey.League)]</label>
            <div class="col-md-10">
                <select asp-for="LeagueId"
                        asp-items="@(new SelectList(Model.Leagues, "Id", "Name"))"
                        class="league-selector">
                </select>
                <span asp-validation-for="LeagueId" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Date" class="col-md-2 control-label">@LocString[nameof(LocalizationKey.Date)]</label>
            <div class="col-md-10">
                <!-- If js is enabled, next field will be hidden and replaced by the next one with attached js calendar -->
                <input asp-for="Date" class="form-control mvc-date-field" />
                <!--
                <input class="form-control bootstrap-date" style="display:none" data-locale="@LanguageData.CurrentLanguage"/>
                -->
                <span asp-validation-for="Date" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="FirstPlayerId" class="col-md-2 control-label">@LocString[nameof(LocalizationKey.FirstPlayer)]</label>
            <div class="col-md-10">
                <select asp-for="FirstPlayerId" class="player-selector">
                    <option>@LocString[nameof(LocalizationKey.SelectOne)]</option>
                    @foreach (var pair in Model.Users)
                    {
                        <option value="@pair.Key.Id" data-leagueIds="@string.Join(",", pair.Value.Select(v => v.ToString()))">@pair.Key.DisplayName</option>
                    }
                </select>
                <span asp-validation-for="FirstPlayerId" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="SecondPlayerId" class="col-md-2 control-label">@LocString[nameof(LocalizationKey.SecondPlayer)]</label>
            <div class="col-md-10">
                <select asp-for="SecondPlayerId" class="player-selector">
                    <option>@LocString[nameof(LocalizationKey.SelectOne)]</option>
                    @foreach (var pair in Model.Users)
                    {
                        <option value="@pair.Key.Id" data-leagueIds="@string.Join(",", pair.Value.Select(v => v.ToString()))">@pair.Key.DisplayName</option>
                    }
                </select>
                <span asp-validation-for="SecondPlayerId" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="FirstPlayerScore" class="col-md-2 control-label">@LocString[nameof(LocalizationKey.FirstPlayerScore)]</label>
            <div class="col-md-10">
                <input asp-for="FirstPlayerScore" class="form-control"/>
                <span asp-validation-for="FirstPlayerScore" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="SecondPlayerScore" class="col-md-2 control-label">@LocString[nameof(LocalizationKey.SecondPlayerScore)]</label>
            <div class="col-md-10">
                <input asp-for="SecondPlayerScore" class="form-control" />
                <span asp-validation-for="SecondPlayerScore" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (ViewBag.Editing ?? false)
                {
                    <button type="submit" class="btn btn-default">
                        @LocString[nameof(LocalizationKey.Save)]
                    </button>
                }
                else
                {
                    <button type="submit" name="torating" value="false" class="btn btn-default">
                        @LocString[nameof(LocalizationKey.AddThisAndAnotherOne)]
                    </button>
                    <button type="submit" name="torating" value="true" class="btn btn-default">
                        @LocString[nameof(LocalizationKey.AddThisAndGoToRating)]
                    </button>
                }
            </div>
        </div>
    </div>
</form>

@section Styles
{
    <link rel="stylesheet" href="~/lib/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css" />
}

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script src="~/lib/moment/min/moment.min.js"></script>
    <script src="~/lib/moment/min/locales.min.js"></script>
    <!--
    <script src="~/lib/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js"></script>
    -->
    <script>
        if (!Date.prototype.toISOString) {
            (function () {

                function pad(number) {
                    var r = String(number);
                    if (r.length === 1) {
                        r = '0' + r;
                    }
                    return r;
                }

                Date.prototype.toISOString = function () {
                    return this.getUTCFullYear()
                      + '-' + pad(this.getUTCMonth() + 1)
                      + '-' + pad(this.getUTCDate())
                      + 'T' + pad(this.getUTCHours())
                      + ':' + pad(this.getUTCMinutes())
                      + ':' + pad(this.getUTCSeconds())
                      + '.' + String((this.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)
                      + 'Z';
                };

            }());
        }

        $(function () {
            /*
            $('.bootstrap-date').each(function (index, element) {
                var item = $(element);
                var mvcField = item.siblings('.mvc-date-field');
                mvcField.hide();
                item.show();
                item.datetimepicker({
                    locale: item.data('locale'),
                    defaultDate: new Date(mvcField.val())
                });
                item.on('dp.change', function (e) {
                    mvcField.val(e.date.toISOString());
                });
            });*/

            var playerSelectors = [];
            $('.player-selector').each(function (index, element) {
                var item = $(element);

                item.initialOptions = item.children();
                playerSelectors.push(item);
            });

            function filterPlayerSelectors(leagueId)
            {
                for (var key in playerSelectors) {
                    item = playerSelectors[key];

                    var currentSelection = item.val();
                    item.empty();

                    for (var i = 0; i < item.initialOptions.length; i++) {
                        var option = $(item.initialOptions[i]).clone();
                        if (!option.data('leagueids') || option.data('leagueids').indexOf(leagueId) >= 0) {
                            item.append(option);
                        }
                    }

                    if (item.children("option[value='" + currentSelection + "']").length) {
                        item.val(currentSelection);
                    } else {
                        item[0].selectedIndex = 0;
                    }
                }
            }

            $('.league-selector').each(function (index, element) {
                filterPlayerSelectors(element.value);
            });

            $('.league-selector').change(function (event) {
                var leagueId = event.currentTarget.value;
                filterPlayerSelectors(leagueId);
            });
        });
    </script>
}